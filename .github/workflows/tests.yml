name: CI Checks

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  cargo-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: ["1.62.1"]
        os: [ubuntu-20.04, macos-12]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1
      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup target add wasm32-unknown-unknown
          rustup component add clippy

  cargo-tests:
    needs: cargo-build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: ["1.62.1"]
        os: [ubuntu-20.04, macos-12]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup target add wasm32-unknown-unknown
          rustup component add clippy

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings

      - name: Build
        shell: bash
        run: |
          cargo build --package xrc --release --all-targets --features ipv4-support
          cargo build --package xrc --release --all-targets
        env:
          RUST_BACKTRACE: 1

  cargo-clippy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: ["1.62.1"]
        os: [ubuntu-20.04, macos-12]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1
      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings

  e2e-test-scenario-1:
    runs-on: ubuntu-20.04
    needs: cargo-build

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup target add wasm32-unknown-unknown
      - name: Install DFX
        run: |
          wget --output-document install-dfx.sh "https://internetcomputer.org/install.sh"
          export DFX_VERSION=0.12.0
          bash install-dfx.sh < <(yes Y)
          rm install-dfx.sh
          dfx cache install
          echo "$HOME/bin" >> $GITHUB_PATH
      - name: Run e2e test - basic
        run: |
          ./cargo run --bin xrc-tests --release -- basic

  e2e-test-scenario-2:
    runs-on: ubuntu-20.04
    needs: cargo-build

    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-1

      - name: Install Rust
        run: |
          rustup update ${{ matrix.rust }} --no-self-update
          rustup default ${{ matrix.rust }}
          rustup target add wasm32-unknown-unknown
      - name: Install DFX
        run: |
          wget --output-document install-dfx.sh "https://internetcomputer.org/install.sh"
          export DFX_VERSION=0.12.0
          bash install-dfx.sh < <(yes Y)
          rm install-dfx.sh
          dfx cache install
          echo "$HOME/bin" >> $GITHUB_PATH
      - name: Run e2e test - cache
        run: |
          ./cargo run --bin xrc-tests --release -- cache

  e2e-checks-pass:
    needs: ["e2e-test-scenario-1", "e2e-test-scenario-2"]
    runs-on: ubuntu-20.04
    steps:
      - name: Checks workflow passes
        run: echo OK

  shell-checks:
    name: ShellCheck
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        env:
          SHELLCHECK_OPTS: -e SC1090 -e SC2119 -e SC1091

  checks-pass:
    needs: ["cargo-clippy", "e2e-checks-pass", "cargo-tests", "shell-checks"]
    runs-on: ubuntu-20.04
    steps:
      - name: Checks workflow passes
        run: echo OK
