type AssetClass = variant { Cryptocurrency; FiatCurrency; };

type Asset = record {
    symbol: text;
    class: AssetClass;
};

// The parameters for the `get_exchange_rate` API call.
type GetExchangeRateRequest = record {
    base_asset: Asset;
    quote_asset: Asset;
    // An optional timestamp to get the rate for a specific time period.
    timestamp: opt nat64;
}; 

type ExchangeRateMetadata = record {
    decimals: nat32;
    base_asset_num_received_rates: nat64;
    base_asset_num_queried_sources: nat64;
    quote_asset_num_received_rates: nat64;
    quote_asset_num_queried_sources: nat64;
    standard_deviation: nat64;
};

type ExchangeRate = record {
    base_asset: Asset;
    quote_asset: Asset;
    timestamp: nat64;
    rate: nat64;
    metadata: ExchangeRateMetadata;
};

type ExchangeRateError = variant {
    // Returned when the canister receives a call from the anonymous principal.
    AnonymousPrincipalNotAllowed: null;
    // Returned when the base asset rates are not found from the exchanges HTTP outcalls.
    CryptoBaseAssetNotFound: null;
    // Returned when the quote asset rates are not found from the exchanges HTTP outcalls.
    CryptoQuoteAssetNotFound: null;
    // Returned when the stablecoin rates are not found from the exchanges HTTP outcalls needed for computing a crypto/fiat pair.
    StablecoinRateNotFound: null;
    // Returned when there are not enough stablecoin rates to determine the forex/USDT rate.
    StablecoinRateTooFewRates: null;
    // Returned when the stablecoin rate is zero.
    StablecoinRateZeroRate: null;
    // Returned when a rate for the provided forex asset could not be found at the provided timestamp.
    ForexInvalidTimestamp: null;
    // Returned when the forex base asset is found.
    ForexBaseAssetNotFound: null;
    // Returned when the forex quote asset is found.
    ForexQuoteAssetNotFound: null;
    // Returned when neither forex asset is found.
    ForexAssetsNotFound: null;
    // Returned when the caller is not the CMC and there are too many active requests.
    RateLimited: null;
    // Returned when the caller does not send enough cycles to make a request.
    NotEnoughCycles: null;
    // Returned when the canister fails to accept enough cycles.
    FailedToAcceptCycles: null;
    /// Returned if too many collected rates deviate substantially.
    InconsistentRatesReceived: null;
    // Until candid bug is fixed, new errors after launch will be placed here.
    Other: record {
        // The identifier for the error that occurred.
        code: nat32;
        // A description of the error that occurred.
        description: text;
    }
};

type RejectionCode = variant {
    NoError;
    SysFatal;
    SysTransient;
    DestinationInvalid;
    CanisterReject;
    CanisterError;
    Unknown;
};

type CallError = record {
    rejection_code: RejectionCode;
    err: text;
};

type EntryResult = variant {
    CallError: CallError;
    Rate: ExchangeRate;
    RateError: ExchangeRateError;
};

type Entry = record {
    request: GetExchangeRateRequest;
    result: EntryResult;
};

type Entries = vec Entry;

type GetEntriesRequest = record {
    offset: nat;
    limit: opt nat;
};

type GetEntriesResponse = record {
    entries: Entries;
    total: nat;
};

type Config = record {
    xrc_canister_id: principal;
};

service : (config: Config) -> {
    // Returns recorded entries from the periodic task.
    "get_entries": (GetEntriesRequest) -> (GetEntriesResponse);
}

