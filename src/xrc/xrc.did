type AssetClass = variant { Cryptocurrency; FiatCurrency; };

type Asset = record {
    symbol: text;
    class: AssetClass;
};

// The parameters for the `get_exchange_rate` API call.
type GetExchangeRateRequest = record {
    base_asset: Asset;
    quote_asset: Asset;
    // An optional timestamp to get the rate for a specific time period.
    timestamp: opt nat64;
}; 

type ExchangeRateMetadata = record {
    base_asset_num_received_rates: nat64;
    base_asset_num_queried_sources: nat64;
    quote_asset_num_received_rates: nat64;
    quote_asset_num_queried_sources: nat64;
    standard_deviation_permyriad: nat64;
    // min_rate_received
    // max_rate_received
};

type ExchangeRate = record {
    base_asset: Asset;
    quote_asset: Asset;
    timestamp: nat64;
    rate_permyriad: nat64;
    metadata: ExchangeRateMetadata;
};

type ExchangeRateError = variant {
    // Returned when the base asset rates are not found from the exchanges HTTP outcalls.
    CryptoBaseAssetNotFound: null;
    // Returned when the quote asset rates are not found from the exchanges HTTP outcalls.
    CryptoQuoteAssetNotFound: null;
    // Returned when the stablecoin rates are not found from the exchanges HTTP outcalls needed for computing a crypto/fiat pair.
    StablecoinRateNotFound: null;
    // Returned when there are not enough stablecoin rates to determine the forex/USDT rate.
    StablecoinRateTooFewRates: null;
    // Returned when the stablecoin rate is zero.
    StablecoinRateZeroRate: null;
    // Returned when a rate for the provided forex asset could not be found at the provided timestamp.
    ForexInvalidTimestamp: null;
    // Returned when the forex base asset is found.
    ForexBaseAssetNotFound: null;
    // Returned when the forex quote asset is found.
    ForexQuoteAssetNotFound: null;
    // Returned when neither forex asset is found.
    ForexAssetsNotFound: null;
    // Returned when the caller is not the CMC and there are too many active requests.
    RateLimited: null;
    // Until candid bug is fixed, new errors after launch will be placed here.
    Other: record {
        // The identifier for the error that occurred.
        code: nat32;
        // A description of the error that occurred.
        description: text;
    }
};

type GetExchangeRateResult = variant {
    // Successfully retrieved the exchange rate from the cache or API calls.
    Ok: ExchangeRate;
    // Failed to retrieve the exchange rate due to invalid API calls, invalid timestamp, etc.
    Err: opt ExchangeRateError;
};

service : {
    "get_exchange_rate": (GetExchangeRateRequest) -> (GetExchangeRateResult);
}
